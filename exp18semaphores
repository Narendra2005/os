#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5

// Shared buffer
int buffer[BUFFER_SIZE];
int count = 0; // Number of items in the buffer

// Semaphores
sem_t mutex, empty, full;

// Producer function
void *producer(void *arg) {
    int item = 1;

    while (1) {
        sleep(1);

        sem_wait(&empty);
        sem_wait(&mutex);

        // Critical Section: Add item to the buffer
        buffer[count++] = item;
        printf("Produced item %d\n", item++);

        sem_post(&mutex);
        sem_post(&full);
    }

    pthread_exit(NULL);
}

// Consumer function
void *consumer(void *arg) {
    while (1) {
        sleep(2);

        sem_wait(&full);
        sem_wait(&mutex);

        // Critical Section: Remove item from the buffer
        int item = buffer[--count];
        printf("Consumed item %d\n", item);

        sem_post(&mutex);
        sem_post(&empty);
    }

    pthread_exit(NULL);
}

int main() {
    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);

    // Create producer and consumer threads
    pthread_t producer_thread, consumer_thread;

    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    // Join threads
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&empty);
    sem_destroy(&full);

    return 0;
}
