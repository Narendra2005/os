#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define READERS_COUNT 3
#define WRITERS_COUNT 2

sem_t mutex, wrt;
int read_count = 0, data = 0;

void *reader(void *arg) {
    while (1) {
        sleep(1);

        sem_wait(&mutex);
        read_count++;
        if (read_count == 1) {
            sem_wait(&wrt);
        }
        sem_post(&mutex);

        // Critical Section: Reading
        printf("Reader %d read data: %d\n", *((int *)arg), data);

        sem_wait(&mutex);
        read_count--;
        if (read_count == 0) {
            sem_post(&wrt);
        }
        sem_post(&mutex);
    }

    pthread_exit(NULL);
}

void *writer(void *arg) {
    while (1) {
        sleep(2);

        sem_wait(&wrt);

        // Critical Section: Writing
        data++;
        printf("Writer %d wrote data: %d\n", *((int *)arg), data);

        sem_post(&wrt);
    }

    pthread_exit(NULL);
}

int main() {
    pthread_t readers[READERS_COUNT], writers[WRITERS_COUNT];
    int reader_ids[READERS_COUNT], writer_ids[WRITERS_COUNT];

    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    // Create reader threads
    for (int i = 0; i < READERS_COUNT; i++) {
        reader_ids[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
    }

    // Create writer threads
    for (int i = 0; i < WRITERS_COUNT; i++) {
        writer_ids[i] = i + 1;
        pthread_create(&writers[i], NULL, writer, &writer_ids[i]);
    }

    // Join threads
    for (int i = 0; i < READERS_COUNT; i++) {
        pthread_join(readers[i], NULL);
    }
    for (int i = 0; i < WRITERS_COUNT; i++) {
        pthread_join(writers[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&wrt);

    return 0;
}
